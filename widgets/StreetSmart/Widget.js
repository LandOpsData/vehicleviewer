function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{return Promise.resolve(value).then(function(value){step('next',value)},function(err){step('throw',err)})}}return step('next')})}}var REQUIRE_CONFIG={async:true,locale:'en',paths:{'react':'https://unpkg.com/react@16.4.1/umd/react.production.min','react-dom':'https://unpkg.com/react-dom@16.4.1/umd/react-dom.production.min','openlayers':'https://cdnjs.cloudflare.com/ajax/libs/openlayers/4.3.3/ol','lodash':'https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.10/lodash.min'}};require(REQUIRE_CONFIG,[],function(){return define(['dojo/_base/declare','dojo/on','dojo/dom','dijit/Tooltip','jimu/BaseWidget','esri/SpatialReference','esri/geometry/Point','esri/geometry/ScreenPoint','esri/tasks/locator','esri/geometry/webMercatorUtils','https://streetsmart.cyclomedia.com/api/v18.14/StreetSmartApi.js','./utils','./RecordingClient','./LayerManager','./MeasurementHandler','./SidePanelManager','./OverlayManager','./FeatureLayerManager'],function(declare,on,dom,Tooltip,BaseWidget,SpatialReference,Point,ScreenPoint,Locator,webMercatorUtils,StreetSmartApi,utils,RecordingClient,LayerManager,MeasurementHandler,SidePanelManager,OverlayManager,FeatureLayerManager){//To create a widget, you need to derive from BaseWidget.
return declare([BaseWidget],{// Custom widget code goes here
baseClass:'jimu-widget-streetsmartwidget',// This property is `set by the framework when widget is loaded.
name:'Street Smart by CycloMedia',_zoomThreshold:null,_viewerType:StreetSmartApi.ViewerType.PANORAMA,_listeners:[],_disableLinkToMap:false,// CM properties
_cmtTitleColor:'#98C23C',_apiKey:'C3oda7I1S_49-rgV63wtWbgtOXcVe3gJWPAVWnAZK3whi7UxCjMNWzIJyv4Fmrcp',// Initial construction, might not be added to DOM yet.
postCreate:function postCreate(){this.inherited(arguments);this.wkid=parseInt(this.config.srs.split(':')[1]);utils.setProj4(CM.Proj4.getProj4());this._locator=new Locator('https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer');if(!this.config.showStreetName){this.streetIndicatorContainer.classList.add('hidden')}this._recordingClient=new RecordingClient({config:this.config,apiKey:this._apiKey,map:this.map});this._layerManager=new LayerManager({wkid:this.wkid,map:this.map,onRecordingLayerClick:this._handleRecordingClick.bind(this),setPanoramaViewerOrientation:this.setPanoramaViewerOrientation.bind(this),addEventListener:this.addEventListener.bind(this),config:this.config,removeEventListener:this.removeEventListener.bind(this)});this._measurementHandler=new MeasurementHandler({wkid:this.wkid,map:this.map,layer:this._layerManager.measureLayer,StreetSmartApi:StreetSmartApi});this._sidePanelManager=new SidePanelManager({sidePanel:this.sidePanel,panoramaViewerDiv:this.panoramaViewerDiv,widget:this});this._overlayManager=new OverlayManager({widget:this,wkid:this.wkid,map:this.map,config:this.config,StreetSmartApi:StreetSmartApi});this._featureLayerManager=new FeatureLayerManager({widget:this,map:this.map,wkid:this.wkid,StreetSmartApi:StreetSmartApi});this._applyWidgetStyle();this._determineZoomThreshold()},startup:function startup(){this.inherited(arguments)},_handleRecordingClick:function _handleRecordingClick(event){var recordingId=event.graphic.attributes.recordingId;this.query(recordingId)},_initApi:function(){var _ref=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee(){var _this=this;var CONFIG;return regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(this.config.agreement!==true)){_context.next=3;break}alert(this.nls.agreementWarning);return _context.abrupt('return');case 3:CONFIG={targetElement:this.panoramaViewerDiv,// I have no idea where this comes from
username:this.config.uName,password:this.config.uPwd,apiKey:this._apiKey,srs:this.config.srs,locale:this.config.locale,configurationUrl:this.config.atlasHost+'/configuration',addressSettings:{locale:this.config.locale,database:'Nokia'}};return _context.abrupt('return',StreetSmartApi.init(CONFIG).then(function(){_this.loadingIndicator.classList.add('hidden');_this._bindInitialMapHandlers();_this._loadRecordings();_this._centerViewerToMap()}));case 5:case'end':return _context.stop();}}},_callee,this)}));function _initApi(){return _ref.apply(this,arguments)}return _initApi}(),_bindInitialMapHandlers:function _bindInitialMapHandlers(){var measurementChanged=StreetSmartApi.Events.measurement.MEASUREMENT_CHANGED;this.addEventListener(StreetSmartApi,measurementChanged,this._handleMeasurementChanged.bind(this));this.addEventListener(this.map,'extent-change',this._handleExtentChange.bind(this));this.addEventListener(this.map,'pan-end',this._handleMapMovement.bind(this))},_handleMapMovement:function _handleMapMovement(e){var diff=e.delta.x+e.delta.y;if(!this._disableLinkToMap&&this.config.linkMapMove===true&&!this._panoramaViewer.props.activeMeasurement){if(diff){this._centerViewerToMap(e.extent.getCenter())}}else if(this._disableLinkToMap){this._disableLinkToMap=false}},_handleMeasurementChanged:function _handleMeasurementChanged(e){var _e$detail=e.detail,panoramaViewer=_e$detail.panoramaViewer,activeMeasurement=_e$detail.activeMeasurement;var newViewer=panoramaViewer;this._handleViewerChanged(newViewer);this._measurementHandler.draw(e);if(this.config.saveMeasurements){this._measurementDetails=activeMeasurement}this._measurementHandler.draw(e);if(this.config.showStreetName){if(activeMeasurement){this.streetIndicatorContainer.classList.add('hidden')}else{this.streetIndicatorContainer.classList.remove('hidden')}}},/**
             * Handles the viewer change and event handler rebinding,
             * starting measurement mode changes the viewer.
             */_handleViewerChanged:function _handleViewerChanged(newViewer){// Handle initial viewer creation
if(!this._panoramaViewer&&newViewer){this._panoramaViewer=newViewer;this._layerManager.addLayers();this._bindViewerDependantEventHandlers();this._setButtonVisibilityInApi();this._handleImageChange();// this._drawDraggableMarker();
if(this.config.navigation===false){this._hideNavigation()}return}// Update the event handlers and everything else once the viewer changed
// Always make sure newViewer is set as newViewer can be undefined
// while this._panoramaViewer can be null
if(newViewer&&newViewer!==this._panoramaViewer){this.removeEventListener(this._viewChangeListener);this.removeEventListener(this._imageChangeListener);this._panoramaViewer=newViewer;this._bindViewerDependantEventHandlers({viewerOnly:true})}},_setButtonVisibilityInApi:function _setButtonVisibilityInApi(){var _this2=this;var bv=this.config.buttonVisibility;var helperFunction=function helperFunction(key){if(bv[key]!==undefined){var button=StreetSmartApi.PanoramaViewerUi.buttons[key];_this2._panoramaViewer.toggleButtonEnabled(button,!!bv[key])}else{console.warn('undefined key found, '+key)}};if(bv){helperFunction('OVERLAYS');helperFunction('ELEVATION');helperFunction('REPORT_BLURRING');helperFunction('OPEN_OBLIQUE');helperFunction('MEASURE');helperFunction('SAVE_IMAGE');helperFunction('IMAGE_INFORMATION');helperFunction('ZOOM_IN');helperFunction('ZOOM_OUT')}},// Adds event listeners which are automatically
// cleared onClose
addEventListener:function addEventListener(target,eventName,callback){var listener=on(target,eventName,callback);// Using dojo on doesn't always return a listener.
// For the panoramaViewer events it returns the panoramaViewer itself.
if(!listener.remove){listener={remove:function remove(){target.off(eventName,callback)}}}this._listeners.push(listener);return listener},removeEventListener:function removeEventListener(listener){listener.remove();var index=this._listeners.indexOf(listener);this._listeners.splice(index,1)},_openApiWhenZoomedIn:function _openApiWhenZoomedIn(){var _this3=this;this.zoomWarning.classList.remove('hidden');var listener=this.addEventListener(this.map,'zoom-end',function(zoomEvent){if(zoomEvent.level>_this3._zoomThreshold){_this3.zoomWarning.classList.add('hidden');_this3._initApi();_this3.removeEventListener(listener)}})},_bindViewerDependantEventHandlers:function _bindViewerDependantEventHandlers(options){var opts=Object.assign({},options,{viewerOnly:false});this._viewChangeListener=this.addEventListener(this._panoramaViewer,StreetSmartApi.Events.panoramaViewer.VIEW_CHANGE,this._handleConeChange.bind(this));this._imageChangeListener=this.addEventListener(this._panoramaViewer,StreetSmartApi.Events.panoramaViewer.IMAGE_CHANGE,this._handleImageChange.bind(this));if(!opts.viewerOnly){this.addEventListener(this.map,'zoom-end',this._handleConeChange.bind(this))}// if we need to save measurements overwrite the default click behaviour.
if(this.config.saveMeasurements&&!this._measurementButtonOverwrideTimer){var clickHandler=this._handleMeasurementPanelToggle.bind(this);// only supports one viewer, having multiple viewers will break this.
var replaceMeasurementButton=function replaceMeasurementButton(){var measurementButton=document.getElementsByClassName('glyphicon novaicon-ruler-1')[0];if(measurementButton&&measurementButton.parentNode.onclick!==clickHandler){var button=measurementButton.parentNode;var new_element=button.cloneNode(true);new_element.onclick=clickHandler;button.parentNode.replaceChild(new_element,button)}};this._measurementButtonOverwrideTimer=setInterval(replaceMeasurementButton,50)}},_handleMeasurementPanelToggle:function _handleMeasurementPanelToggle(e){this._sidePanelManager.toggleMeasurementSidePanel(true)},// We do not use removeEventListener for this,
// as removing stuff in an array is a bad idea.
_removeEventListeners:function _removeEventListeners(){this._listeners.forEach(function(listener){listener.remove()});this._listeners=[]},_handleConeChange:function _handleConeChange(){this._layerManager.updateViewingCone(this._panoramaViewer)},_handleImageChange:function _handleImageChange(){var _this4=this;this._handleConeChange();this._overlayManager.addOverlaysToViewer();if(!this._disableLinkToMap&&this.config.linkMapMove===true&&!this._panoramaViewer.props.activeMeasurement){var recording=this._panoramaViewer.getRecording();if(!recording||!recording.xyz){return}var x=recording.xyz[0];var y=recording.xyz[1];if(!x||!y){return}var coord=new Point(x,y,this._layerManager.srs);// Transform local SRS to Web Mercator:
var coordLocal=utils.transformProj4js(coord,this.map.spatialReference.wkid);this.map.centerAt(coordLocal);this._disableLinkToMap=true}var rec=this._panoramaViewer.getRecording();var xyz=rec.xyz;var srs=rec.srs;var point=new Point(xyz[0],xyz[1],new SpatialReference(Number(srs.split(':')[1])));var location=utils.transformProj4js(point,102100);this._locator.locationToAddress(location,0,function(result){var el=_this4.streetIndicator;if(el){el.innerHTML=result.address.ShortLabel}})},_handleExtentChange:function _handleExtentChange(){this._loadRecordings()},_loadRecordings:function _loadRecordings(){var _this5=this;if(!this.config.navigation){return}if(this.map.getZoom()>this._zoomThreshold){this._recordingClient.load().then(function(response){_this5._layerManager.updateRecordings(response)})}else{this._layerManager.updateRecordings([])}},_applyWidgetStyle:function _applyWidgetStyle(){var panel=this.getPanel();// Set title color for Widget.
if(panel.titleNode){panel.titleNode.style.backgroundColor=this._cmtTitleColor;if(panel.titleLabelNode)panel.titleLabelNode.style.color='white'}// Remove padding (white 'border') around viewer.
panel.containerNode.children[0].style.padding='0px'},_centerViewerToMap:function _centerViewerToMap(center){var mapCenter=center||this.map.extent.getCenter();var mapSRS=this.config.srs.split(':')[1];var localCenter=utils.transformProj4js(mapCenter,mapSRS);// Manually fire these events as they are fired too early by the API,
// we can't listen to them yet.
this.query(localCenter.x+','+localCenter.y)},query:function query(_query){var _this6=this;var timeTravelVisible=this.config.timetravel!==undefined&&this.config.navigation===true?this.config.timetravel:false;var navbarVisible=this.config.navigation!==undefined?this.config.navigation:true;return StreetSmartApi.open(_query,{viewerType:[this._viewerType],srs:this.config.srs,panoramaViewer:{closable:false,maximizable:true,timeTravelVisible:timeTravelVisible,navbarVisible:navbarVisible,measureTypeButtonVisible:!this.config.saveMeasurements,measureTypeButtonStart:!this.config.saveMeasurements,measureTypeButtonToggle:!this.config.saveMeasurements}}).then(function(result){var viewer=result.length?result[0]:null;_this6._handleViewerChanged(viewer);_this6._handleConeChange()})},setPanoramaViewerOrientation:function setPanoramaViewerOrientation(orientation){var currentOrientation=this._panoramaViewer.getOrientation();this._panoramaViewer.setOrientation(Object.assign({},currentOrientation,orientation))},_determineZoomThreshold:function _determineZoomThreshold(){var maxMapZoom=this.map.getMaxZoom();var zoomThreshold=maxMapZoom-3;if(maxMapZoom>20){zoomThreshold=maxMapZoom-5}this._zoomThreshold=zoomThreshold;return zoomThreshold},_hideNavigation:function _hideNavigation(){var _this7=this;this._panoramaViewer.toggleNavbarVisible(false);this._panoramaViewer.toggleTimeTravelVisible(false);setTimeout(function(){_this7._panoramaViewer.toggleRecordingsVisible(false)})},onOpen:function onOpen(){var zoomLevel=this.map.getZoom();// Only open when the zoomThreshold is reached.
if(zoomLevel>this._zoomThreshold){this._initApi()}else{this._openApiWhenZoomedIn()}},onClose:function onClose(){StreetSmartApi.destroy({targetElement:this.panoramaViewerDiv});this.loadingIndicator.classList.remove('hidden');this.streetIndicator.innerHTML='';this._overlayManager.reset();this._removeEventListeners();this._layerManager.removeLayers();this._panoramaViewer=null;this._measurementButtonOverwrideTimer=clearInterval(this._measurementButtonOverwrideTimer);this._saveButtonOverwrideTimer=clearInterval(this._saveButtonOverwrideTimer);this._sidePanelManager.toggleMeasurementSidePanel(false)},_drawDraggableMarker:function _drawDraggableMarker(){var nav=this.panoramaViewerDiv.querySelector('.navbar .navbar-right .nav');if(!nav)return;var exampleButton=nav.querySelector('.btn');// Draw the actual button in the same style as the other buttons.
var markerButton=dojo.create('button',{id:'addMapDropBtn',class:exampleButton.className,draggable:true,ondragend:this._handleMarkerDrop.bind(this)});nav.appendChild(markerButton);var toolTipMsg=this.nls.tipDragDrop;new Tooltip({connectId:markerButton,label:toolTipMsg,position:['above']})},_handleMarkerDrop:function _handleMarkerDrop(e){e.preventDefault();// Figure out on what pixels (relative to the map) the marker was dropped.
var containerOffset=this.map.container.getBoundingClientRect();var mapRelativePixels={x:e.clientX-containerOffset.x,y:e.clientY-containerOffset.y};var sPoint=new ScreenPoint(mapRelativePixels.x,mapRelativePixels.y);var mPoint=this.map.toMap(sPoint);var vPoint=utils.transformProj4js(mPoint,this.wkid);this.query(vPoint.x+','+vPoint.y)},startMeasurement:function startMeasurement(type){var _this8=this;var geometry=void 0;switch(type){case'POINT':geometry=StreetSmartApi.MeasurementGeometryType.POINT;StreetSmartApi.startMeasurementMode(this._panoramaViewer,{geometry:geometry});break;case'LINE':geometry=StreetSmartApi.MeasurementGeometryType.LINESTRING;StreetSmartApi.startMeasurementMode(this._panoramaViewer,{geometry:geometry});break;case'POLYGON':geometry=StreetSmartApi.MeasurementGeometryType.POLYGON;StreetSmartApi.startMeasurementMode(this._panoramaViewer,{geometry:geometry});break;default:console.error('API ERROR: unknown measurement geometry type. Could be undefined');break;}// if we need to save measurements overwrite the default click behaviour.
if(this.config.saveMeasurements&&!this._saveButtonOverwrideTimer&&this._selectedLayerID){var clickHandler=this._handleMeasurementPanelToggle.bind(this);// only supports one viewer, having multiple viewers will break this.
var placeSaveButton=function placeSaveButton(){var panel=document.getElementsByClassName('floating-panel-controls')[1];if(panel&&panel.children.length!==2){var button=panel.childNodes[0];var clone=button.cloneNode(true);clone.childNodes[0].classList.remove('novaicon-navigation-down-3');clone.childNodes[0].classList.add('novaicon-data-download-2');panel.insertBefore(clone,button);clone.onclick=_this8._saveMeasurement.bind(_this8)}};this._saveButtonOverwrideTimer=setInterval(placeSaveButton,50)}else if(this._saveButtonOverwrideTimer&&!this._selectedLayerID){this._saveButtonOverwrideTimer=clearInterval(this._saveButtonOverwrideTimer)}},_rerender:function _rerender(){this._overlayManager.addOverlaysToViewer()},_saveMeasurement:function _saveMeasurement(){var layer=this.map.getLayer(this._selectedLayerID);if(layer){if(this._layerUpdateListener)this._layerUpdateListener.remove();this._layerUpdateListener=this.addEventListener(layer,'update-end',this._rerender.bind(this));this._featureLayerManager._saveMeasurementsToLayer(layer,this._measurementDetails);StreetSmartApi.stopMeasurementMode()}},// communication method between widgets
onReceiveData:function onReceiveData(name,widgetId,data){if(name!=='Search'){return}if(data.selectResult){var searchedPoint=data.selectResult.result.feature.geometry;var searchedPtLocal=utils.transformProj4js(searchedPoint,this.wkid);this.query(searchedPtLocal.x+','+searchedPtLocal.y)}}})})});